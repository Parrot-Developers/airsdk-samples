/**
 * Copyright (c) 2023 Parrot Drones SAS
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * * Redistributions of source code must retain the above copyright
 *   notice, this list of conditions and the following disclaimer.
 * * Redistributions in binary form must reproduce the above copyright
 *   notice, this list of conditions and the following disclaimer in
 *   the documentation and/or other materials provided with the
 *   distribution.
 * * Neither the name of the Parrot Company nor the names
 *   of its contributors may be used to endorse or promote products
 *   derived from this software without specific prior written
 *   permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 * PARROT COMPANY BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
 * OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
 * AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
 * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */
#pragma once

#include <airsdk/airsdk.hpp>
/**
 * include header file generated by protoc compiler. The c file is still
 * necessary for some of the arsdk functions, that have no cpp wrapper so far
 */
#include <arsdk/camera2.pb-c.h>
#include <arsdk/camera2.pb.h>
#include <msghub_utils.h>

class MissionController {
private:
	/**
	 * a control interface is a Parrot object, responsible for connecting to
	 * the autopilot, and triggers the 'Send command' and 'Received event'
	 */
	airsdk::control::ControlInterface mControlItf;

	/*
	 * current state of the custom state machine it is at. The state machine
	 * is shaped as an enum, and enables to follow this sequence of events:
	 * - send recording configuration - mandatory before recording anything
	 * - start recording
	 * - stop recording
	 * - send photo configuration - mandatory before taking any photo
	 * - take photo
	 */
	int mVideoPhotoCurrentState;

	/*
	 * beacon to know if the drone has already gone through hovering state
	 * or not yet
	 */
	bool hasAlreadyHovered;

public:
	MissionController(pomp::Loop &loop);
	~MissionController() = default;

	/**
	 * start the mission controller interface, that aims to autonomously
	 * handle airsdk commands and events sent to and received from the drone
	 */
	int start();

	void setVideoPhotoCurrentState(int state)
	{
		this->mVideoPhotoCurrentState = state;
	}

	/**
	 * Fcam stands for the front camera, responsible for video recording and
	 * taking pictures. Those commands handle protobuf command sending. They
	 * are good examples of how to send a protobuf command in C++
	 */
	int cmdFcamStartPhoto();
	int cmdFcamStartRecording();
	int cmdFcamStopRecording();
	int cmdFcamSetConfigPhoto();
	int cmdFcamSetConfigRecording();

	/**
	 * callback that aims to be called when an event is received, as
	 * response to a command sent thanks to the previous methods. That
	 * callback handles autonomously the scrolling through the planned
	 * custom state machine of one's video/photo mission
	 */
	int onCmdReceived(const arsdk_cmd *cmd);

	/**
	 * functions that aim to ease the understanding of the consequence of
	 * each event upon the custom state machine
	 */
	void reactInSmToFlyingStateChange(int32_t state);
	void reactToEventState(arsdk::camera::Event *evt);
	void reactToEventStateConfigFieldNumber(arsdk::camera::Event *evt);
	void reactInSmToCameraMode(arsdk::camera::CameraMode mode);
	void reactInSmToEventPhoto(arsdk::camera::Event *evt);
	void reactInSmToEventRecording(arsdk::camera::Event *evt);
};